package com.example.chuyendedidong2;import androidx.activity.result.ActivityResultCallback;import androidx.activity.result.ActivityResultLauncher;import androidx.activity.result.contract.ActivityResultContracts;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.appcompat.app.AppCompatActivity;import android.Manifest;import android.content.Intent;import android.content.pm.PackageManager;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.net.Uri;import android.os.Build;import android.os.Bundle;import android.text.TextUtils;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.Toast;import com.example.chuyendedidong2.Model.ProductModel;import com.google.android.gms.tasks.OnCompleteListener;import com.google.android.gms.tasks.OnFailureListener;import com.google.android.gms.tasks.OnSuccessListener;import com.google.android.gms.tasks.Task;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.database.ValueEventListener;import com.google.firebase.storage.FileDownloadTask;import com.google.firebase.storage.FirebaseStorage;import com.google.firebase.storage.StorageReference;import com.google.firebase.storage.UploadTask;import java.io.File;import java.io.IOException;import java.util.UUID;import de.hdodenhof.circleimageview.CircleImageView;public class ActivityQuanLySanPham extends AppCompatActivity {    ImageView ivHinh, ivPic1, ivPic2, ivPic3;    EditText edtTen, edtGia, edtSl, edtDes;    Button btnThem;    DiaLogLoanding diaLogLoanding;    FirebaseDatabase database;    FirebaseAuth auth;    FirebaseStorage storage;    Uri uri;    public static final int IMAGE_PICK_CODE = 1000;    public static final int PERMISSION_CODE = 1001;//    ActivityResultLauncher<String> mGetContent = registerForActivityResult(new ActivityResultContracts.GetContent(), new ActivityResultCallback<Uri>() {//        @Override//        public void onActivityResult(Uri result) {//            if (result != null){//                ivHinh.setImageURI(result);//                uri = result;//            }//        }//    });    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_quan_ly_san_pham);        diaLogLoanding = new DiaLogLoanding(this);        database = FirebaseDatabase.getInstance();        auth = FirebaseAuth.getInstance();        storage = FirebaseStorage.getInstance();        setControl();        setEvent();    }    private void setEvent() {        btnThem.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                themSanPham(view);            }        });        ivHinh.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                onClickRequesetPermission();            }        });    }    private void onClickRequesetPermission() {        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {            if(checkSelfPermission(Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED){                requestPermissions(new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},PERMISSION_CODE);            }else {            }        }else {        }    }    @Override    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults);        if (requestCode == PERMISSION_CODE){            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED){            }        }    }    private void themSanPham(View view) {        String ten = edtTen.getText().toString();        String gia = edtGia.getText().toString();        String sl = edtSl.getText().toString();        String des = edtDes.getText().toString();        diaLogLoanding.ShowDiaLog("Đang thêm sản phẩm...");        if (TextUtils.isEmpty(ten)){            diaLogLoanding.HideDialog();            edtTen.setError("Nhập tên sản phẩm!");            return;        }else if (TextUtils.isEmpty(gia)){            diaLogLoanding.HideDialog();            edtGia.setError("Nhập giá sản phẩm!");            return;        }else if (TextUtils.isEmpty(sl)){            diaLogLoanding.HideDialog();            edtSl.setError("Nhập số lượng sản phẩm!");            return;        }else if (TextUtils.isEmpty(des)){            diaLogLoanding.HideDialog();            edtDes.setError("Nhập chi tiết sản phẩm!");            return;        }        DatabaseReference root = database.getReference("product");        DatabaseReference rootShop = database.getReference("shop");        final String[] nameShop = {""};        rootShop.addValueEventListener(new ValueEventListener() {            @Override            public void onDataChange(@NonNull DataSnapshot snapshot) {                nameShop[0] = snapshot.child(auth.getUid()).child("name").getValue().toString();            }            @Override            public void onCancelled(@NonNull DatabaseError error) {            }        });        String productId = root.push().getKey();        StorageReference image = storage.getReference().child("images/"+productId+"/"+UUID.randomUUID().toString());        image.putFile(uri);        ProductModel product = new ProductModel(productId,uri.toString(),0,ten,Integer.parseInt(gia),Integer.parseInt(sl),des,auth.getUid(), nameShop[0],"","","");        root.child(productId).setValue(product, new DatabaseReference.CompletionListener() {            @Override            public void onComplete(@Nullable DatabaseError error, @NonNull DatabaseReference ref) {                diaLogLoanding.HideDialog();                Toast.makeText(ActivityQuanLySanPham.this, "Thêm thành công!", Toast.LENGTH_SHORT).show();                startActivity(new Intent(ActivityQuanLySanPham.this,HomePageCuaHangActivity.class));            }        });    }    public final void setImage(CircleImageView imageView, String avatar) {        StorageReference storageReference = FirebaseStorage.getInstance().getReference().child("images/user/" + avatar);        try {            final File file = File.createTempFile("ảnh", "jpg");            storageReference.getFile(file).addOnSuccessListener(new OnSuccessListener<FileDownloadTask.TaskSnapshot>() {                @Override                public void onSuccess(FileDownloadTask.TaskSnapshot taskSnapshot) {                    Bitmap bitmap = BitmapFactory.decodeFile(file.getAbsolutePath());                    imageView.setImageBitmap(bitmap);                }            }).addOnFailureListener(new OnFailureListener() {                @Override                public void onFailure(@NonNull Exception e) {                    Log.d("Notify", "Load Image Fail");                }            });        } catch (IOException e) {            e.printStackTrace();        }    }    private void setControl() {        ivHinh = findViewById(R.id.ivThemHinhSP);        edtTen = findViewById(R.id.edtThemTenSP);        edtGia = findViewById(R.id.edtThemGiaSP);        edtSl = findViewById(R.id.edtThemSoLuongSP);        edtDes = findViewById(R.id.edtThemChiTietSP);        btnThem = findViewById(R.id.btnThemSP);        ivPic1 = findViewById(R.id.ivPic1);        ivPic2 = findViewById(R.id.ivPic2);        ivPic3 = findViewById(R.id.ivPic3);    }}